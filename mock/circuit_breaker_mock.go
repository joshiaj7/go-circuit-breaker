// Code generated by MockGen. DO NOT EDIT.
// Source: go-circuit-breaker (interfaces: CircuitBreaker)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCircuitBreaker is a mock of CircuitBreaker interface.
type MockCircuitBreaker struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerMockRecorder
}

// MockCircuitBreakerMockRecorder is the mock recorder for MockCircuitBreaker.
type MockCircuitBreakerMockRecorder struct {
	mock *MockCircuitBreaker
}

// NewMockCircuitBreaker creates a new mock instance.
func NewMockCircuitBreaker(ctrl *gomock.Controller) *MockCircuitBreaker {
	mock := &MockCircuitBreaker{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreaker) EXPECT() *MockCircuitBreakerMockRecorder {
	return m.recorder
}

// CalculateWindowValue mocks base method.
func (m *MockCircuitBreaker) CalculateWindowValue(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateWindowValue", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateWindowValue indicates an expected call of CalculateWindowValue.
func (mr *MockCircuitBreakerMockRecorder) CalculateWindowValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateWindowValue", reflect.TypeOf((*MockCircuitBreaker)(nil).CalculateWindowValue), arg0)
}

// GenerateKeys mocks base method.
func (m *MockCircuitBreaker) GenerateKeys(arg0 time.Time) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeys", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GenerateKeys indicates an expected call of GenerateKeys.
func (mr *MockCircuitBreakerMockRecorder) GenerateKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeys", reflect.TypeOf((*MockCircuitBreaker)(nil).GenerateKeys), arg0)
}

// GetTrip mocks base method.
func (m *MockCircuitBreaker) GetTrip(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrip", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrip indicates an expected call of GetTrip.
func (mr *MockCircuitBreakerMockRecorder) GetTrip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrip", reflect.TypeOf((*MockCircuitBreaker)(nil).GetTrip), arg0)
}

// GetTripWarning mocks base method.
func (m *MockCircuitBreaker) GetTripWarning(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTripWarning", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTripWarning indicates an expected call of GetTripWarning.
func (mr *MockCircuitBreakerMockRecorder) GetTripWarning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTripWarning", reflect.TypeOf((*MockCircuitBreaker)(nil).GetTripWarning), arg0)
}

// GetWindowDurationStr mocks base method.
func (m *MockCircuitBreaker) GetWindowDurationStr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowDurationStr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWindowDurationStr indicates an expected call of GetWindowDurationStr.
func (mr *MockCircuitBreakerMockRecorder) GetWindowDurationStr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowDurationStr", reflect.TypeOf((*MockCircuitBreaker)(nil).GetWindowDurationStr))
}

// IsExceedingThreshold mocks base method.
func (m *MockCircuitBreaker) IsExceedingThreshold(arg0 context.Context, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExceedingThreshold", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExceedingThreshold indicates an expected call of IsExceedingThreshold.
func (mr *MockCircuitBreakerMockRecorder) IsExceedingThreshold(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExceedingThreshold", reflect.TypeOf((*MockCircuitBreaker)(nil).IsExceedingThreshold), arg0, arg1)
}

// SetActive mocks base method.
func (m *MockCircuitBreaker) SetActive(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActive", arg0)
}

// SetActive indicates an expected call of SetActive.
func (mr *MockCircuitBreakerMockRecorder) SetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockCircuitBreaker)(nil).SetActive), arg0)
}

// SetThreshold mocks base method.
func (m *MockCircuitBreaker) SetThreshold(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThreshold", arg0)
}

// SetThreshold indicates an expected call of SetThreshold.
func (mr *MockCircuitBreakerMockRecorder) SetThreshold(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreshold", reflect.TypeOf((*MockCircuitBreaker)(nil).SetThreshold), arg0)
}

// UpdateLatestBucketsValue mocks base method.
func (m *MockCircuitBreaker) UpdateLatestBucketsValue(arg0 context.Context, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateLatestBucketsValue", arg0, arg1)
}

// UpdateLatestBucketsValue indicates an expected call of UpdateLatestBucketsValue.
func (mr *MockCircuitBreakerMockRecorder) UpdateLatestBucketsValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLatestBucketsValue", reflect.TypeOf((*MockCircuitBreaker)(nil).UpdateLatestBucketsValue), arg0, arg1)
}

// UpdateTrip mocks base method.
func (m *MockCircuitBreaker) UpdateTrip(arg0 context.Context, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTrip", arg0, arg1)
}

// UpdateTrip indicates an expected call of UpdateTrip.
func (mr *MockCircuitBreakerMockRecorder) UpdateTrip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrip", reflect.TypeOf((*MockCircuitBreaker)(nil).UpdateTrip), arg0, arg1)
}

// UpdateTripWarning mocks base method.
func (m *MockCircuitBreaker) UpdateTripWarning(arg0 context.Context, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTripWarning", arg0, arg1)
}

// UpdateTripWarning indicates an expected call of UpdateTripWarning.
func (mr *MockCircuitBreakerMockRecorder) UpdateTripWarning(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTripWarning", reflect.TypeOf((*MockCircuitBreaker)(nil).UpdateTripWarning), arg0, arg1)
}
